// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/defaults/cluster-ingress.yaml (570B)
// assets/router/cluster-role-binding.yaml (329B)
// assets/router/cluster-role.yaml (654B)
// assets/router/deployment.yaml (1.776kB)
// assets/router/metrics/cluster-role-binding.yaml (285B)
// assets/router/metrics/cluster-role.yaml (259B)
// assets/router/metrics/role-binding.yaml (297B)
// assets/router/metrics/role.yaml (291B)
// assets/router/metrics/service-monitor.yaml (580B)
// assets/router/namespace.yaml (373B)
// assets/router/service-account.yaml (213B)
// assets/router/service-cloud.yaml (628B)
// assets/router/service-internal.yaml (512B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDefaultsClusterIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xb1\x6e\xdc\x30\x10\x44\x7b\x7e\xc5\xe0\x5c\x4b\xc1\xb5\x6a\x93\x14\x06\x52\x04\x08\x90\x7e\x8f\x1a\x9d\x36\x47\x2d\x09\x72\x65\x23\xf9\xfa\x40\x96\x94\xc2\x71\xc9\xc1\xf2\xf1\xed\xf0\x09\x9f\xd3\xda\x9c\xf5\xd9\xee\x95\xad\xe1\x55\x7d\xc6\xc8\x49\xd6\xe4\x78\x91\xb4\xb2\x85\x27\x3c\x5b\x73\x49\x89\x15\x31\xdb\xa4\x77\xb4\xc2\xa8\x93\xc6\x63\x04\x52\x09\x29\x25\x29\x47\x88\xa3\xae\xe6\xba\xb0\x0f\x0f\xb5\x71\x78\xf7\x46\x90\xa2\x3f\x59\x9b\x66\x1b\xa0\x7b\xd6\xe7\x42\x6b\xb3\x4e\xde\x6b\xfe\xf4\x72\x95\x54\x66\xb9\x86\x85\x2e\xa3\xb8\x0c\x01\x30\x59\x38\x9c\x6a\xc7\xb9\x15\x89\x1c\xf0\xef\x72\x77\xe0\xba\x5c\x58\xc5\x73\x0d\xc0\xa4\x26\x49\xff\xb0\xb6\x8d\xf2\x84\xaf\xd6\xd6\x4a\xf8\x2c\x8e\x6c\xe9\x37\x7c\x26\xce\x79\x44\x31\x8c\x4c\x74\xbe\xe5\x67\x13\x71\xdf\xe0\xd4\x45\xbe\xfd\x62\xf4\xfe\x3f\x7c\xf7\xf1\x42\x07\xa6\x3b\x30\xa7\x66\xd8\x6a\xdc\xad\x8e\x6e\xbe\xe4\x45\xd4\xa0\xed\x83\x36\xb1\x36\xb5\xfb\x9b\x96\xbe\xfb\x8f\x4d\xc4\xf2\xc8\xef\x49\x22\x17\x9a\x6f\xd0\x3d\xfa\xc1\xc4\xe8\xb9\xee\x09\xb0\x88\xc7\xf9\x9b\xdc\x98\xda\x19\x01\x97\x6d\xb2\xab\x39\xb1\x7f\xac\x37\x56\xa3\xb3\x6d\xe2\xaf\xb9\x3e\x58\x2f\x03\x2e\x97\x00\x54\x96\xa4\x51\xda\x80\x6b\xf8\x1b\x00\x00\xff\xff\xf1\x4e\x69\x66\x3a\x02\x00\x00")

func assetsDefaultsClusterIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefaultsClusterIngressYaml,
		"assets/defaults/cluster-ingress.yaml",
	)
}

func assetsDefaultsClusterIngressYaml() (*asset, error) {
	bytes, err := assetsDefaultsClusterIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defaults/cluster-ingress.yaml", size: 570, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0xc4, 0x45, 0xf8, 0xf3, 0xeb, 0x45, 0xb, 0x43, 0x73, 0xb5, 0xee, 0xed, 0x17, 0x6b, 0x3d, 0xb2, 0x5c, 0x5c, 0xa, 0x4b, 0xde, 0x77, 0xff, 0x90, 0xd0, 0x6, 0xad, 0xc9, 0x63, 0xfc, 0x46}}
	return a, nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x31\x4e\xc4\x40\x0c\x45\xfb\x39\x85\x25\xea\x0c\xa2\x43\xd3\x01\x37\x58\x24\x7a\xef\xc4\xbb\x31\x49\xec\xc8\xf6\xa4\xe0\xf4\x28\x4a\x44\xc3\x4a\x29\x2d\xf9\xbf\xff\xfe\x13\xbc\xb3\xf4\x0e\x31\x10\x98\xb6\x20\x03\xd3\x89\x20\x14\x38\x1c\x3e\xc9\x56\xae\x04\x6f\xb5\x6a\x93\xc8\x69\x64\xe9\x0b\x7c\x4c\xcd\x83\xec\xa2\x13\x6d\x71\x96\x7b\xc2\x85\xbf\xc8\x9c\x55\x0a\xd8\x15\x6b\xc6\x16\x83\x1a\xff\x60\xb0\x4a\x1e\x5f\x3d\xb3\x3e\xaf\x2f\x69\xa6\xc0\x1e\x03\x4b\x02\x10\x9c\xa9\x80\x2e\x24\x3e\xf0\x2d\x3a\x96\xbb\x91\x7b\xb7\x9b\x24\x6f\xd7\x6f\xaa\xe1\x25\x75\xb0\x17\x1f\x3e\x87\xce\x1f\xe1\xf8\xdf\x4f\x5f\xb0\x3e\xa2\xa6\x6d\xd8\x85\x6e\x5b\xf1\xbf\x19\xe7\x32\x27\xf0\xdf\x00\x00\x00\xff\xff\x83\x13\xa9\xa6\x49\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 329, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x9a, 0xeb, 0xd3, 0x79, 0x1a, 0xa6, 0x75, 0xb5, 0xda, 0x10, 0x70, 0xf9, 0x80, 0xd1, 0x51, 0x55, 0x98, 0x4d, 0x11, 0x98, 0x79, 0x5c, 0x46, 0x99, 0xa3, 0x39, 0x68, 0xe9, 0xa2, 0x72, 0x56}}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x4f\x03\x31\x0c\x85\xf7\xfc\x0a\xab\xcc\x77\x15\x1b\xba\x95\x81\x1d\x21\x76\x5f\xe2\x72\xa6\x69\x1c\xd9\xce\x55\xe2\xd7\xa3\xbb\x16\x84\x5a\x90\xe8\x96\x17\xd9\xdf\x7b\x7e\x77\xf0\x98\x9b\x39\x29\x58\x94\x4a\x09\x54\x32\xc1\x4e\x14\x54\x9a\x93\x5a\x0f\x2f\x13\x1b\xd8\x24\x2d\x27\x18\x09\xd0\x40\xc9\x5c\x39\x3a\xcf\xab\xac\x62\xc6\x63\xa6\x3e\xec\xb9\xa4\xe1\x8b\xf8\x2c\x99\x02\x56\x7e\x25\x35\x96\x32\x80\x8e\x18\x7b\x6c\x3e\x89\xf2\x07\x3a\x4b\xe9\xf7\x0f\xd6\xb3\x6c\xe7\xfb\x70\x20\xc7\x84\x8e\x43\x00\x28\x78\xa0\x01\xa4\x52\xb1\x89\x77\xde\x71\x79\x53\x32\xeb\x4e\x91\x82\xb6\x4c\x36\x84\x0e\xb0\xf2\x93\x4a\xab\xb6\x2c\x75\xb0\xd9\x04\x58\xb2\x49\xd3\x48\xe7\x3f\x2a\xa9\x0a\x17\xb7\x55\x2d\x60\xab\x18\xe9\x24\x8d\x74\xe6\x93\x98\x49\xc7\xf3\x4a\x66\xf3\xf5\x71\x44\x8f\x53\xb8\xf6\x59\x4e\xa0\xe2\x1c\x7f\xde\x70\x6d\xed\xb2\xa7\xa2\x34\x33\x1d\x2f\x1c\xa2\x12\x3a\xfd\x41\xbe\x2c\xe7\x1a\x6c\x6d\x7c\xa7\xe8\x18\x23\x99\xdd\x66\xb0\x36\xd8\x7f\x37\xfb\x2b\x7e\x9d\xb9\xb5\x93\xff\x83\xb7\xe6\xe8\xed\x82\xdf\x6a\x5a\x02\x7f\x06\x00\x00\xff\xff\xef\xa4\xbd\x5b\x8e\x02\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 654, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0xeb, 0x9d, 0xb3, 0x5c, 0xa1, 0x1f, 0xfb, 0x73, 0x10, 0xc0, 0x9e, 0x1c, 0x20, 0xc8, 0xf7, 0x31, 0x30, 0x5, 0x6a, 0xbd, 0xba, 0xa9, 0x91, 0xf8, 0xce, 0xb6, 0x64, 0x47, 0x80, 0x47, 0xc8}}
	return a, nil
}

var _assetsRouterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\x22\x39\x10\xbd\xf3\x15\xa5\xe1\x30\xa7\x0e\x93\x9d\x68\xb5\xeb\x1b\x82\x9e\x15\xd2\x90\xb4\xa0\x93\x2b\x32\xee\x02\x2c\xdc\xb6\x55\x55\x4d\x96\xfd\xfa\x95\x81\x24\xdd\xbd\x24\xca\xde\xa6\x4e\xc8\xf5\xde\xab\x57\x94\xab\x3d\x84\x29\x46\x17\x8e\x35\x7a\x81\x67\x2b\x3b\xa8\x70\xa3\x1b\x27\x70\xd0\xae\x41\x1e\x0c\x61\xe2\x1a\x16\x24\x98\xf9\x2d\x21\x33\x70\x44\x63\x37\xd6\x5c\x10\xa0\x09\x41\xc7\xe8\x2c\x56\xa0\x05\xa8\xf1\x62\x6b\xbc\x19\xec\xad\xaf\x54\x4b\x7e\xa0\xa3\x7d\x42\x62\x1b\xbc\x4a\x04\x1e\x1d\x6e\x07\x35\x8a\xae\xb4\x68\x35\x00\x18\xc2\xbd\xae\x11\x2c\x03\xa3\x74\xa4\x00\xbc\xae\x91\xa3\x36\xa8\x20\x44\xf4\xbc\xb3\x1b\xc9\xec\xd9\xd1\x00\xc0\xe9\x35\x3a\x4e\x22\x90\xa4\x15\x50\x68\x04\x69\x90\xbc\xa6\x53\x46\x87\x46\x02\x9d\x11\xb5\x16\xb3\xfb\xd9\xa2\x74\x49\x00\x82\x75\x74\x5a\xf0\x02\x6f\x79\x4c\xe1\x3a\xcc\x3e\x17\xe0\xa5\xe8\xe9\x37\xd2\xc1\x1a\x1c\x1b\x13\x1a\x2f\xa9\xbf\x0e\x14\xc0\x87\x0a\x97\x1d\x77\x29\xd6\x28\xfa\x66\xdf\xac\x91\x3c\x0a\xf2\x8d\x0d\xa3\xc0\x0a\x9c\xf5\xcd\xdf\xaf\xa0\x44\xcd\x28\x38\xec\x21\x9f\x03\xed\x91\x14\x7c\xfd\x7a\x81\x46\xb2\x81\xac\x1c\x27\x4e\x33\x9f\x3d\xf0\x91\x05\xeb\xcc\x9c\x67\x9b\x19\xb2\x62\x8d\x76\x17\x82\x09\x5e\xb4\xf5\x48\xad\x2e\xb3\xd3\x0c\x7a\xee\x53\x0c\xc1\xd6\x7a\xfb\xce\xdc\x5e\xe2\x04\x29\x1a\xe7\x8a\xe0\xac\x39\x2a\x98\x6d\xee\x83\x14\x84\x9c\x6e\xc6\x1b\x2e\x06\x92\x56\xd1\xb7\xb2\x3b\x91\xd8\x3a\x6e\x79\x2c\x02\x89\x82\x3f\xbe\x75\xb2\x91\x82\x04\x13\x9c\x82\x72\x52\xbc\x23\xc7\x1f\xe9\xdd\xdd\x7d\xff\x5f\x82\x35\x0a\x59\xf3\xa1\xe4\xed\x9f\xdf\x7f\xff\x94\xe6\x10\xe6\x48\xdb\xde\x3a\xbd\xa5\xd1\x1f\x54\x07\xcd\xa2\x85\xa1\x61\xa4\xe4\x05\xb4\xaf\x20\x6a\xe6\xe7\x40\xd5\x69\x3b\xb7\xe8\x91\xb4\x74\x04\xaf\xb4\xb0\x2c\xc7\xe5\x72\x55\x3c\x2c\xca\x8e\xcb\xd3\x9a\x2b\xf8\x92\xec\x7f\xb9\x42\x5b\x3c\x3c\x96\xf9\x62\xb5\xcc\x17\x4f\xb3\x49\xbe\xba\x1f\xcf\xf3\x65\x31\x9e\xe4\xd7\x44\xae\xed\x6e\x5f\x6f\x9a\xff\x18\x3f\xfe\x2c\x57\x93\x7c\x51\xce\x7e\xcc\x26\xe3\x32\x5f\x4d\x67\x8b\x6b\x72\x23\x14\x33\x8a\x7b\x3b\x12\xc7\xa3\x48\xf6\xa0\xa5\xdd\x98\xb3\x07\xf4\xc8\x5c\x50\x58\xa3\xea\x08\x58\x6f\xc5\x6a\x37\x45\xa7\x8f\x4b\x34\xc1\x57\xac\xe0\xb6\x7b\x87\xd2\x1d\xf9\x0b\xa5\x4b\x04\x88\x5a\x76\x0a\x46\x3b\xd4\x4e\x76\xff\xf4\x93\xd7\x26\x4d\xa8\x2b\xfb\x2b\x18\x39\x04\xd7\xd4\x38\x4f\x9f\xa2\xde\x92\xd5\xe9\xac\x38\x0b\x7e\xfc\xa7\xc2\x65\x4c\x97\x77\x22\x33\x48\x92\x9e\x83\x3e\x2a\x35\xfd\xe0\xdd\x51\x81\x50\xf3\x92\x3a\x1b\x78\xad\x9d\x7d\x42\x8b\xd1\x50\xb7\xf7\x0b\x7a\x1e\x2a\x54\x70\xf7\xdb\xb7\xce\x2e\x2c\x4f\xf0\xff\x3e\x24\xd9\x79\x8b\xfe\x0d\x00\x00\xff\xff\x85\x0f\xed\x28\xf0\x06\x00\x00")

func assetsRouterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDeploymentYaml,
		"assets/router/deployment.yaml",
	)
}

func assetsRouterDeploymentYaml() (*asset, error) {
	bytes, err := assetsRouterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/deployment.yaml", size: 1776, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xbd, 0xd3, 0x71, 0x6, 0xe9, 0x26, 0x52, 0x80, 0x60, 0x6c, 0xc6, 0x7f, 0x13, 0xbb, 0x1e, 0x6b, 0x79, 0x5a, 0xd4, 0x40, 0x76, 0x7c, 0x13, 0x59, 0x95, 0x30, 0xde, 0x51, 0xc6, 0xeb, 0x99}}
	return a, nil
}

var _assetsRouterMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\x4a\xc4\x40\x0c\x86\xef\xf3\x14\x79\x81\x56\xbc\x2d\x73\x53\x0f\xde\x57\xf0\x9e\x9d\xa6\x36\xb6\x93\x0c\x49\xa6\x07\x9f\x5e\x8a\x22\xc2\x42\xaf\x81\x7c\xdf\xff\xad\x2c\x53\x86\x97\xad\x7b\x90\x5d\x75\xa3\x67\x96\x89\xe5\x23\x61\xe3\x77\x32\x67\x95\x0c\x76\xc3\x32\x62\x8f\x45\x8d\xbf\x30\x58\x65\x5c\x2f\x3e\xb2\x3e\xec\x8f\xa9\x52\xe0\x84\x81\x39\x01\x08\x56\xca\x60\xda\x83\x6c\xa8\x2a\x1c\x6a\x07\xcc\xfb\xed\x93\x4a\x78\x4e\x03\xfc\x18\xdf\xc8\x76\x2e\xf4\x54\x8a\x76\x89\xbf\xd7\x66\x5a\x29\x16\xea\x3e\xac\x17\xff\x3d\x7b\xc3\x42\x19\xb4\x91\xf8\xc2\x73\xfc\x27\x9b\x6e\x74\xa5\xf9\x90\xdf\xa5\x9c\x0c\x02\xc0\xc6\xaf\xa6\xbd\x9d\xd4\xa5\xef\x00\x00\x00\xff\xff\x7f\xc0\x4a\x40\x1d\x01\x00\x00")

func assetsRouterMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsClusterRoleBindingYaml,
		"assets/router/metrics/cluster-role-binding.yaml",
	)
}

func assetsRouterMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/cluster-role-binding.yaml", size: 285, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xce, 0x4e, 0xd1, 0x37, 0xde, 0x79, 0x91, 0x5c, 0x71, 0xd1, 0x88, 0x1b, 0xdb, 0xaf, 0x1, 0xe5, 0x8c, 0x81, 0xb3, 0xfd, 0x30, 0xe3, 0x5d, 0xb0, 0x59, 0x8b, 0x2a, 0x47, 0xf9, 0xa0, 0xdf}}
	return a, nil
}

var _assetsRouterMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\x4e\xc4\x40\x0c\x84\xe1\x7e\x9f\xc2\x12\x75\x72\xa2\x43\x69\x29\xe8\x29\xe8\x9d\xec\x70\xb1\x2e\x6b\xaf\x6c\xef\x49\xf0\xf4\xe8\x44\x90\xa8\xe7\x93\xfe\x79\xa2\xd7\x63\x44\xc2\xc9\xed\x40\x90\x02\x15\x95\xd6\x2f\xea\x6e\x0d\xb9\x63\x04\xa5\x51\x6c\xce\x1d\xe4\x36\x1e\xb6\x21\x5d\xb6\x20\x68\xed\x26\x9a\x85\xbb\x7c\xc0\x43\x4c\x17\xf2\x95\xb7\x99\x47\xee\xe6\xf2\xcd\x29\xa6\xf3\xed\x25\x66\xb1\xcb\xfd\xb9\xdc\x44\xeb\xf2\xd7\x7c\xb7\x03\xa5\x21\xb9\x72\xf2\x52\x88\x94\x1b\x96\x33\x32\x35\x53\x49\x73\xd1\x6b\xf1\x71\x20\x96\x32\x11\x77\x79\x73\x1b\x3d\x1e\x7a\xfa\x95\xb3\x75\x68\xec\xf2\x99\xb3\x58\x21\x72\x84\x0d\xdf\xf0\xdf\x78\x5c\xce\xcf\x85\xe8\x0e\x5f\xcf\xf1\x8a\x2c\x3f\x01\x00\x00\xff\xff\x4f\xd5\xdf\xe0\x03\x01\x00\x00")

func assetsRouterMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsClusterRoleYaml,
		"assets/router/metrics/cluster-role.yaml",
	)
}

func assetsRouterMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/cluster-role.yaml", size: 259, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x77, 0x73, 0x9c, 0x6, 0x33, 0xf2, 0x91, 0x6f, 0x3b, 0x35, 0x49, 0xf3, 0xa5, 0xfc, 0x1d, 0x2e, 0x2e, 0xa6, 0x5b, 0x95, 0xa6, 0x7e, 0x8d, 0xfe, 0x7e, 0xf4, 0x62, 0x30, 0xa5, 0x37, 0x61}}
	return a, nil
}

var _assetsRouterMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x31\x4e\xc5\x40\x0c\x04\xd0\x7e\x4f\xe1\x0b\x24\x88\xee\x6b\x3b\x68\xe8\x3f\x12\xbd\xb3\x71\x12\x93\xac\xbd\xb2\xbd\x29\x38\x3d\x42\x8a\x44\x05\xd2\x6f\x47\x33\x9a\x87\x8d\x3f\xc8\x9c\x55\x32\xd8\x84\x65\xc4\x1e\x9b\x1a\x7f\x61\xb0\xca\xb8\xdf\x7c\x64\x7d\x3a\x9f\xd3\xce\x32\x67\xb8\xeb\x41\xaf\x2c\x33\xcb\x9a\x2a\x05\xce\x18\x98\x13\x80\x60\xa5\x0c\xcd\xb4\x52\x6c\xd4\x7d\xd8\x6f\x7e\xc5\xde\xb0\x50\x06\x6d\x24\xbe\xf1\x12\x03\xcb\x6a\xe4\x9e\x4c\x0f\xba\xd3\xf2\x33\xc7\xc6\x6f\xa6\xbd\xfd\x63\x48\x00\xbf\x84\xbf\x1e\xbd\x4f\x9f\x54\xc2\x73\x1a\xae\xf6\x3b\xd9\xc9\x85\x5e\x4a\xd1\x2e\xf1\xa0\xb4\xaa\x70\xa8\xb1\xac\x90\xbe\x03\x00\x00\xff\xff\x15\x9f\x30\x56\x29\x01\x00\x00")

func assetsRouterMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsRoleBindingYaml,
		"assets/router/metrics/role-binding.yaml",
	)
}

func assetsRouterMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/role-binding.yaml", size: 297, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0xef, 0x8, 0xfb, 0x1f, 0xa3, 0xc7, 0xfb, 0xbc, 0x6, 0x78, 0xad, 0x0, 0x28, 0x90, 0xc8, 0xe8, 0xf5, 0x7d, 0xf8, 0xd0, 0xeb, 0x52, 0xf, 0xd4, 0x81, 0xce, 0x69, 0xb8, 0x8c, 0x26, 0x8c}}
	return a, nil
}

var _assetsRouterMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x91\x37\x3b\x0f\xdd\x02\xfd\x40\xf7\x0e\xdd\x19\xe9\x36\x26\x62\x8b\x02\x49\xb9\x68\xbf\xbe\x88\xe3\x02\x9d\x78\xef\x01\xc1\xc3\x7f\xf4\xa6\x0b\x9c\x1a\x50\x51\xe9\xfa\x45\xdd\x74\x45\xcc\x18\x4e\xa1\xe4\xc5\xb8\x83\x4c\x47\xc0\x68\x45\x98\x14\x27\xb4\xda\x55\x5a\x24\xee\xf2\x0e\x73\xd1\x96\xc9\xae\x5c\xce\x3c\x62\x56\x93\x6f\x0e\xd1\x76\xbe\x5f\xfc\x2c\xfa\x7f\x7b\x49\x77\x69\x35\xef\xae\xb4\x22\xb8\x72\x70\x4e\x44\x8d\x57\xe4\x3f\xca\xe9\x7e\xf1\x03\x7b\xe7\x82\x4c\xda\xd1\x7c\x96\x8f\x98\xa4\xdd\x0c\xee\xc9\xc6\x02\xcf\x69\x22\xee\xf2\x6a\x3a\xba\x3f\x2e\x4d\x74\x3a\x25\x22\x83\xeb\xb0\x82\x83\x39\x6c\x93\x02\xdf\xcb\xef\xd7\xcf\xd6\xb5\x3e\xc2\x06\xbb\x1e\xcb\x37\xc4\x3e\x17\xf1\x67\xf8\xe4\x28\x73\xfa\x09\x00\x00\xff\xff\x67\x78\x6f\x08\x23\x01\x00\x00")

func assetsRouterMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsRoleYaml,
		"assets/router/metrics/role.yaml",
	)
}

func assetsRouterMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/role.yaml", size: 291, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xe3, 0x68, 0x2c, 0xfd, 0xf1, 0x27, 0x9d, 0xa0, 0x3b, 0x10, 0x3e, 0xca, 0x3b, 0x76, 0x39, 0xf4, 0xb1, 0x37, 0x7b, 0xa3, 0xa7, 0x11, 0xc0, 0x6, 0x4b, 0x47, 0xbb, 0x93, 0x4b, 0xb7, 0xc2}}
	return a, nil
}

var _assetsRouterMetricsServiceMonitorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\xca\x1b\x41\x0c\x84\xfb\x7b\x0a\x81\xeb\xf3\x26\xa4\xdb\x36\x10\x48\x91\x34\x7f\x48\x2f\xcb\xb2\x4f\xf8\x56\x5a\x24\x9d\x53\x84\xbc\x7b\xb8\x3b\x9b\xb8\x08\xfc\xa5\x66\x67\x86\x8f\xd9\x03\x7c\xd5\x8b\x79\x03\xeb\xac\x31\xc9\x25\xc7\x66\x2a\x69\x2e\x7a\x05\x3c\xd9\x92\xf0\x6b\x12\x9a\x80\xf5\xdc\x4d\x34\x21\x0d\x96\x60\xb8\x98\x43\xe3\x74\xa1\x00\xb2\x79\x66\x4a\x31\x1d\x6e\xa2\xe7\x0a\x6f\xec\x77\x21\xfe\xb6\x57\x0d\xd8\xe5\x27\x7b\x88\x69\x85\x7f\xf5\x47\x32\x67\x8b\x23\x59\x2b\xf7\x8f\x43\xe3\xc4\x33\x26\xd6\x01\xe0\x00\x8a\x8d\x41\x02\x82\x13\x30\xc1\x17\x4d\x69\x3c\xc0\xf6\x10\x1d\x89\xeb\x0b\xb3\xe8\xd5\x39\x62\x88\xce\xb4\xe6\x9f\xb0\xb1\x1e\x23\x9c\x18\x9d\xfd\x87\xdd\x58\xbf\xc8\xcc\x15\xca\x1d\xbd\xf8\xa2\x25\x98\x9c\x33\xca\x6d\x39\xb1\x2b\x27\xc7\x51\xac\xc4\x8e\x8f\x44\xb6\x68\x96\x5c\x83\x03\x00\x80\x68\xb2\xdf\x71\xae\xf0\xe9\x43\x6c\x4a\x37\xcf\xfa\x1c\x62\x53\x82\x26\x6e\x5c\x61\xca\xec\x0f\x0f\xe6\x54\xa1\xbc\x9a\x72\x8e\xcf\xa6\x17\xb9\xd6\xed\x04\x20\x7c\x90\x71\x52\xe9\x6e\x8d\x73\xe2\x25\x0a\x6d\xae\x86\x3d\x76\x2a\xbd\x8e\xc4\x9e\x31\x12\x8e\xa7\x45\xcf\x33\x3f\x69\x47\xc2\x23\x79\x3e\xfa\x0e\xb0\xca\xec\xdf\xdf\xdd\xf1\x8d\xd7\xbf\x33\xdf\x49\x1a\x26\x4d\x6b\x28\xf6\x7b\xfc\xcf\xca\x00\xf1\xcc\xc0\xef\x3f\xc3\xdf\x00\x00\x00\xff\xff\xff\x3e\x51\x03\x44\x02\x00\x00")

func assetsRouterMetricsServiceMonitorYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsServiceMonitorYaml,
		"assets/router/metrics/service-monitor.yaml",
	)
}

func assetsRouterMetricsServiceMonitorYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsServiceMonitorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/service-monitor.yaml", size: 580, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x2f, 0xfd, 0x56, 0xf1, 0x61, 0x45, 0x4f, 0xa3, 0xed, 0x37, 0x9a, 0xca, 0x10, 0x56, 0xd7, 0x3d, 0xe7, 0xde, 0x10, 0xc, 0x47, 0xbd, 0x97, 0xd1, 0x37, 0x3, 0xbc, 0x8e, 0x3d, 0xef, 0xad}}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x4e\xf3\x40\x0c\x84\xef\xfb\x14\xa3\xfd\xcf\xfd\x81\xeb\xbe\x03\x5c\x90\xb8\x3b\x59\xb7\x35\xd9\xd8\xd1\xda\x09\xaf\x8f\x42\x23\xa8\xd4\xf3\x7c\xf2\x37\x9e\x49\xb4\x16\xbc\xd1\xcc\xbe\xd0\xc8\x89\x16\xf9\xe0\xee\x62\x5a\xb0\xbd\xa4\x99\x83\x2a\x05\x95\x04\x28\xcd\x5c\x60\x0b\xab\x5f\xe5\x1c\x27\xd1\x4b\x67\xf7\x04\x90\xaa\x05\x85\x98\xfa\x0e\xe2\x0f\xfa\x2f\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\xa0\xd1\xc0\xed\x80\xff\xc1\x39\xb0\x51\x5b\x19\x61\xa0\xcd\xa4\xa2\xf2\xc2\x5a\x45\x2f\x30\xc5\xb4\x0e\x0c\xaa\xb3\xf8\x5e\x0c\x71\xa5\x38\x00\xdf\xe3\x5f\x1b\x68\x11\x7f\x2c\xd0\x57\x3d\x35\xde\xb8\x15\xe4\xe7\x7c\x38\xa9\x35\xfb\xba\xfb\x66\x36\x95\xb0\xbe\x1b\xc3\xd0\xcc\x26\x9c\xad\xe3\x9d\xfb\x26\x23\xbf\xde\x52\xd8\xf0\xc9\x63\x38\x64\x6f\x21\xfe\xb3\xc9\x6d\xb8\x07\xeb\xd8\x56\x0f\xee\x77\x87\x0b\x72\xf4\x95\x73\xfa\x0e\x00\x00\xff\xff\x29\x57\x21\x5b\x75\x01\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 373, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x62, 0x94, 0xa7, 0xc8, 0x35, 0x52, 0x42, 0x57, 0xac, 0x7e, 0xfa, 0x95, 0x1d, 0x7e, 0x8e, 0xaa, 0x9c, 0x4f, 0x18, 0xee, 0x6f, 0xaa, 0x40, 0xaf, 0xb6, 0xc7, 0xc6, 0xc2, 0x6, 0x75, 0x73}}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x4e\xc4\x30\x10\x84\xe1\xde\x4f\x31\xd2\xd5\x9c\x44\xeb\x8e\x92\x16\x24\x7a\xb3\x99\xbb\x5b\x91\x78\xcd\xee\x3a\x88\xb7\x47\x41\x29\xa7\x98\x5f\xdf\x05\x2f\x22\x36\x7b\xe2\x66\x0e\xb7\x99\xf4\x80\x38\x5b\x72\xc1\xe7\x2f\xf2\x41\xd8\xa0\xb7\x34\xbf\xe2\x35\xf1\xa3\xeb\x0a\xe7\xf7\x54\x27\x64\x9d\x91\x74\x84\xd8\xe0\x52\x2e\x18\xf4\x4d\x23\xd4\x7a\xc0\xb9\xfe\x57\xd2\xf0\x76\x84\x31\xdc\x84\x11\xda\xef\xd7\xf2\xa5\x7d\xa9\x78\xa7\xef\x2a\x3c\x0d\xa5\x0d\xfd\xa0\x1f\xef\x8a\xfd\xb9\x6c\xcc\xb6\xb4\x6c\xb5\x00\xbd\x6d\xac\x27\xf0\x9c\x31\x9a\xb0\x1e\xba\x1e\x0f\xbd\xe5\x93\xf6\xbb\x33\xa2\xfc\x05\x00\x00\xff\xff\x33\xdc\xda\x8c\xd5\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 213, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xe3, 0x6, 0x3a, 0x88, 0x2e, 0x33, 0xe3, 0x24, 0xf0, 0xf0, 0xe9, 0x43, 0xc8, 0x46, 0x6c, 0x60, 0x9, 0x69, 0x84, 0x3, 0xd8, 0xc3, 0x80, 0xb, 0xab, 0x37, 0x13, 0xce, 0xf2, 0xeb, 0x60}}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6b\x14\x41\x10\x85\xef\xfd\x2b\x1e\xe4\x9c\xa0\x98\x83\xcc\x31\x39\x09\x41\x16\x5c\xbc\x57\x7a\x6a\x76\x9a\xf4\x54\x35\x55\x35\xab\xfb\xef\xa5\x7b\x37\xa0\x28\x1e\xe7\x31\xfd\xd5\x7b\xdf\x1d\x5e\x94\x66\x3c\x51\x25\xc9\x6c\xf8\xc6\x76\x2e\x99\x11\x8a\x56\x29\x33\x8a\x60\x31\x95\x80\x2e\x88\x95\x61\xba\x07\x5b\x8f\x73\xd5\x7d\x06\xcb\xb9\x98\xca\xc6\x12\xfe\x90\xee\xf0\x5c\x77\xef\x3f\x7c\x91\x93\xb1\x3b\xbc\x71\x2e\x4b\xc9\x38\x53\xdd\xd9\x41\xc6\xa0\xd6\x6a\xe1\x19\x14\xb0\x5d\xa2\x6c\xfc\x90\xde\x8a\xcc\xd3\xfb\xf9\x44\xad\x7c\x67\xf3\xa2\x32\xe1\xfc\x31\x6d\x1c\x34\x53\xd0\x94\x80\x3b\x7c\xa5\x8d\x51\x1c\xce\xf1\x07\x02\x10\xda\xd8\x1b\x65\x9e\xa0\x8d\xc5\xd7\xb2\xc4\x7d\xb9\x36\x49\x40\xa5\x57\xae\xde\x21\xe8\x1d\xa6\xdb\x98\xd4\x3b\xf6\x34\x2e\x8d\xa7\x21\xe4\xdd\x47\x02\x9c\x2b\xe7\x50\xfb\xfb\x59\xef\x72\x5c\x8b\x83\xaa\x2b\x56\xf2\x21\x88\x97\x85\xf3\xd0\xb5\x91\xbd\x15\x39\xe1\xe5\x09\x4d\xb5\x22\xc8\x4e\x1c\x0e\x72\xec\xb2\x32\xd5\x58\x2f\xf8\xb1\xb2\x40\x74\xc0\x6e\x6e\x9b\xce\x57\x4f\xcd\xd8\xb9\xab\x17\x10\x44\x67\xc6\x2b\xaf\x45\xe6\x71\xc7\xaf\xaa\xfa\x6c\xfe\x19\x6c\x42\xf5\x68\xb4\x2c\x25\x1f\xb4\x96\x7c\xe9\x43\x32\xd5\x04\x34\xb5\x18\xab\xef\x87\xa0\x09\x6b\x44\x1b\x6b\x9a\x69\x68\xd6\x3a\xe1\xf8\x7c\xb8\x26\x6a\x31\xe1\xf3\x87\xf1\x71\x2d\x7c\x18\xd1\xed\xcd\xef\x08\xff\x2f\xe3\xf1\xf1\xd3\x3f\x21\x9e\x7e\x05\x00\x00\xff\xff\x14\xac\xd6\xf5\x74\x02\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 628, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x35, 0x3d, 0xd7, 0x8, 0xf9, 0xba, 0x0, 0x54, 0xbd, 0x2a, 0xeb, 0x98, 0x83, 0x6f, 0x28, 0x5e, 0xda, 0xd8, 0xa9, 0x45, 0x65, 0xe2, 0x35, 0x98, 0xd0, 0x6, 0x64, 0xc4, 0x82, 0x36, 0x14}}
	return a, nil
}

var _assetsRouterServiceInternalYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x31\x4f\x23\x41\x0c\x05\xe0\x7e\x7e\xc5\x93\x52\xe7\x74\x51\xa2\xd3\x31\x1d\x4a\x95\x06\x45\x02\xd1\x9b\x59\x27\xb1\x98\x9d\x19\xd9\xde\x20\xfe\x3d\xda\x0d\x11\x0b\x34\x29\xd7\xfb\xfc\xf9\xcd\x02\xdb\x3c\x98\xb3\xe2\x91\xf5\x2c\x89\xf1\x26\x7e\x42\xc7\x07\x1a\xb2\xe3\x4c\x79\x60\x0b\x5f\xa9\x5d\x39\x2a\x9b\xc1\x1a\x27\x39\x48\x02\x95\x52\x9d\x5c\x6a\x31\x90\x32\xa8\xb5\x2c\xdc\x81\x1c\x3a\x14\x97\x9e\xff\x84\x57\x29\x5d\xbc\x1e\x08\xd4\xe4\x99\xd5\xa4\x96\x88\xf3\x2a\xf4\xec\xd4\x91\x53\x0c\xc0\x02\x0f\xd4\x33\xa8\x74\xb8\xff\xe1\x1a\xfb\x37\x13\x28\xd4\xb3\x35\x4a\x1c\x51\x1b\x17\x3b\xc9\xc1\x97\x72\xe9\x17\x80\x4c\x2f\x9c\x6d\x54\x31\x96\x8a\xd0\x3a\x38\x6b\x18\x9b\x8f\x53\x7f\x6f\x1c\xaf\xef\xda\xed\x03\x60\x9c\x39\x79\xd5\xdf\x3b\x40\xab\xea\x13\xb6\x9c\xee\x46\x9c\xdc\xdb\x94\x1b\xff\x44\xfc\xff\x7b\xf9\xd0\xea\x35\xd5\x1c\xf1\xb4\xdd\x4f\x13\x27\x3d\xb2\xef\xa7\xd0\xe7\xce\x9c\xb0\x99\xb1\xd9\xac\x6f\x44\x6c\xa6\xf4\xec\x2a\x69\xee\xac\xee\xd6\xff\x6e\x80\xa6\xd8\x47\x00\x00\x00\xff\xff\x30\x30\x02\xf6\x00\x02\x00\x00")

func assetsRouterServiceInternalYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceInternalYaml,
		"assets/router/service-internal.yaml",
	)
}

func assetsRouterServiceInternalYaml() (*asset, error) {
	bytes, err := assetsRouterServiceInternalYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-internal.yaml", size: 512, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x3, 0x6d, 0x72, 0xb, 0x1e, 0xd8, 0x4, 0x82, 0xd2, 0xb1, 0x70, 0xa9, 0x3f, 0xf, 0x83, 0x3a, 0x2b, 0xeb, 0x18, 0x2b, 0x1e, 0xd2, 0xd6, 0xc3, 0xbe, 0x58, 0x72, 0xaa, 0xee, 0x2f, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/defaults/cluster-ingress.yaml": assetsDefaultsClusterIngressYaml,

	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,

	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,

	"assets/router/deployment.yaml": assetsRouterDeploymentYaml,

	"assets/router/metrics/cluster-role-binding.yaml": assetsRouterMetricsClusterRoleBindingYaml,

	"assets/router/metrics/cluster-role.yaml": assetsRouterMetricsClusterRoleYaml,

	"assets/router/metrics/role-binding.yaml": assetsRouterMetricsRoleBindingYaml,

	"assets/router/metrics/role.yaml": assetsRouterMetricsRoleYaml,

	"assets/router/metrics/service-monitor.yaml": assetsRouterMetricsServiceMonitorYaml,

	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,

	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,

	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,

	"assets/router/service-internal.yaml": assetsRouterServiceInternalYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"defaults": {nil, map[string]*bintree{
			"cluster-ingress.yaml": {assetsDefaultsClusterIngressYaml, map[string]*bintree{}},
		}},
		"router": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"deployment.yaml":           {assetsRouterDeploymentYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsRouterMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsRouterMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsRouterMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsRouterMetricsRoleYaml, map[string]*bintree{}},
				"service-monitor.yaml":      {assetsRouterMetricsServiceMonitorYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":        {assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":  {assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml":    {assetsRouterServiceCloudYaml, map[string]*bintree{}},
			"service-internal.yaml": {assetsRouterServiceInternalYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
